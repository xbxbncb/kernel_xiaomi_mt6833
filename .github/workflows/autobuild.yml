name: Auto Kernel Builer
on:
   push:
      branches: [main,ksunext,ksunext-susfs]
   workflow_dispatch:
      inputs:
         ksuversion:
            description: "请输入 KernelSU Next 的版本号"
            required: true
            default: "1.1.1"
         susfsversion:
            description: "请输入 SUSFS 的版本号"
            required: true
            default: "1.5.5"
         kernelversion:
            description: "请输入版本号"
            required: true
            default: "Unknow"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        branch: ['main', 'ksunext', 'ksunext-susfs']
      fail-fast: false
    timeout-minutes: 45
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_MAXSIZE: 20G
      ARCH: arm64
      SUBARCH: arm

    steps:
    - name: Checkout ${{ matrix.branch }} branch Code
      uses: actions/checkout@v4
      with:
        ref: ${{ matrix.branch }}

    - name: Install Dependencies & toolchain
      run: |
        sudo apt update
        sudo apt install -y \
          build-essential \
          clang-14 \
          lld \
          libssl-dev \
          libelf-dev \
          flex \
          bison \
          bc \
          ccache \
          curl \
          git \
          git-lfs \
          gnupg \
          gperf \
          imagemagick \
          liblz4-tool \
          libncurses6 \
          libncurses5-dev \
          libsdl1.2-dev \
          libxml2 \
          libxml2-utils \
          lzop \
          pngcrush \
          rsync \
          schedtool \
          squashfs-tools \
          xsltproc \
          zip \
          zlib1g-dev \
          gcc-14-aarch64-linux-gnu \
          gcc-14-arm-linux-gnueabi \
          llvm-14 \
          llvm-14-tools
   
    - name: Set swap to 10G
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10

    - name: Configure ccache
      run: |
        mkdir -p $CCACHE_DIR
        echo "max_size = $CCACHE_MAXSIZE"
        sudo chmod -R 777 $CCACHE_DIR

    - name: Restore ccache
      uses: actions/cache@v3
      with:
        path: ${{ env.CCACHE_DIR }}
        key: kernel-ccache-${{ runner.os }}-${{ env.ARCH }}-${{ matrix.branch }}
    
    - name: Build Kernel (ARM64 Cross-Compile)
      run: |
        make -j32 O=out \
          CC="ccache clang" \
          LD=ld.lld \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CROSS_COMPILE_COMPAT=aarch64-linux-gnueabi- \
          CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
          LLVM_IAS=1 \
          KCFLAGS="--target=aarch64-linux-gnu \
                   -Wno-unused-but-set-variable \
                   -Wno-implicit-function-declaration \
                   -Wno-unused-variable \
                   -Wno-unused-function \
                   -Wno-unused-label \
                   -Wno-incompatible-pointer-types" \
          evergo_defconfig

        if [ ${{ matrix.branch }} == ksunext-susfs ]; then
          VERSION="${{ github.event.inputs.kernelversion }}-ksunext-${{ github.event.inputs.ksuversion }}-with-susfs-${{ github.event.inputs.susfsversion }}"
        elif [ ${{ matrix.branch }} == ksunext ]; then
          VERSION="${{ github.event.inputs.kernelversion }}-ksunext-${{ github.event.inputs.ksuversion }}"
        else
          VERSION="${{ github.event.inputs.kernelversion }}"
        fi

        sed -i 's/CONFIG_LOCALVERSION=.*/CONFIG_LOCALVERSION="-perf-${VERSION}"/' out/.config
        sed -i 's/CONFIG_LOCALVERSION_AUTO=y/CONFIG_LOCALVERSION_AUTO=n/' out/.config

        make -j32 O=out \
          CC="ccache clang" \
          LD=ld.lld \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CROSS_COMPILE_COMPAT=aarch64-linux-gnueabi- \
          CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
          LLVM_IAS=1 \
          KCFLAGS="--target=aarch64-linux-gnu \
                   -Wno-unused-but-set-variable \
                   -Wno-implicit-function-declaration \
                   -Wno-unused-variable \
                   -Wno-unused-function \
                   -Wno-unused-label \
                   -Wno-incompatible-pointer-types"

    - name: Package Kernel
      run: |
        git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git AnyKernel3
        cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
        cd AnyKernel3

        sed -i 's/device\.name1=.*/device.name1=evergo/' anykernel.sh
        sed -i '/device\.name[2-5]=.*/d' anykernel.sh
        if [ ${{ matrix.branch }} == ksunext ]; then
          sed -i 's/kernel\.string=.*/kernel.string=Linux Kernel 4.14.336 patched KernelSU Next 1.1.1 by 酷安@孤独不能/' anykernel.sh
        elif [ ${{ matrix.branch }} == ksunext-susfs ]; then
          sed -i 's/kernel\.string=.*/kernel.string=Linux Kernel 4.14.336 patched KernelSU Next 1.1.1 and SUSFS 1.5.5 by 酷安@孤独不能/' anykernel.sh
        else
          sed -i 's/kernel\.string=.*/kernel.string=Linux Kernel 4.14.336 by 酷安@孤独不能/' anykernel.sh
        fi
        sed -i 's/BLOCK=.*/BLOCK=boot/' anykernel.sh
        sed -i 's/IS_SLOT_DEVICE=.*/IS_SLOT_DEVICE=auto/' anykernel.sh
        
        zip -r ../AnyKernel3-${{ matrix.branch }}.zip *
        cd ..

    - name: Upload AnyKernel3.zip
      uses: actions/upload-artifact@v4
      with:
        name: AnyKernel3-${{ matrix.branch }}.zip
        path: AnyKernel3-${{ matrix.branch }}.zip

    - name: Install GitHub CLI
      run: sudo apt install -y gh

    - name: Delete old cache before saving new
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Deleting old cache (if exists)..."
        cache_id=$(gh cache list | grep -P "\bkernel-ccache-${{ runner.os }}-${{ env.ARCH }}-${{ matrix.branch }}\b(?!-)" | awk '{print $1}')
        if [ -n "$cache_id" ]; then
          gh cache delete "$cache_id" || true
        fi

    - name: Save ccache
      if: always()
      uses: actions/cache/save@v3
      with:
        path: ${{ env.CCACHE_DIR }}
        key: kernel-ccache-${{ runner.os }}-${{ env.ARCH }}-${{ matrix.branch }}
    
